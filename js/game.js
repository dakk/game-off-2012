// Generated by CoffeeScript 1.4.0
(function() {
  var game, pp;

  pp = PP;

  pp.init("game", 640, 480);

  pp.loop.rate = 30;

  pp.spr.welcome = new pp.Sprite('data/welcome.png', 1, 0, 0);

  pp.spr.start = new pp.Sprite('data/start.png', 1, 0, 0);

  pp.spr.background = new pp.Sprite('data/background.png', 1, 0, 0);

  pp.spr.gameover = new pp.Sprite('data/gameover.png', 1, 0, 0);

  pp.spr.retry = new pp.Sprite('data/retry.png', 1, 0, 0);

  pp.spr.player = {};

  pp.spr.player.right = new pp.Sprite('data/pr.png', 19, 0, 0);

  pp.spr.player.left = new pp.Sprite('data/pl.png', 19, 0, 0);

  pp.spr.player.mask = new pp.Sprite('data/playermask.png', 1, 0, 0);

  pp.spr.objects = {};

  pp.spr.objects.p10 = new pp.Sprite('data/p10.png', 1, 0, 0);

  pp.spr.objects.p20 = new pp.Sprite('data/p20.png', 1, 0, 0);

  pp.spr.objects.p50 = new pp.Sprite('data/p50.png', 1, 0, 0);

  pp.spr.objects.m5 = new pp.Sprite('data/m5.png', 1, 0, 0);

  pp.spr.objects.m10 = new pp.Sprite('data/m10.png', 1, 0, 0);

  pp.spr.objects.m20 = new pp.Sprite('data/m20.png', 1, 0, 0);

  pp.spr.objects.mask = new pp.Sprite('data/obmask.png', 1, 0, 0);

  game = function() {
    var best_score,
      _this = this;
    best_score = 0;
    pp.obj.start = {
      mask: pp.spr.start.mask,
      depth: -1,
      initialize: function(t) {
        t.x = 640 / 2 - 114 / 2;
        return t.y = 300;
      },
      draw: function(t) {
        return pp.spr.start.draw(t.x, t.y);
      },
      tick: function(t) {
        if (pp.mouse.left.down && pp.collision.point(t, pp.mouse.x, pp.mouse.y, false)) {
          return pp.loop.room = pp.rm.play;
        }
      }
    };
    pp.obj.welcome = {
      depth: -1,
      draw: function(t) {
        return pp.spr.welcome.draw(0, 0);
      }
    };
    pp.obj.background = {
      depth: -1,
      draw: function(t) {
        return pp.spr.background.draw(0, 0);
      }
    };
    pp.obj.score = {
      initialize: function(t) {
        t.countdown = new pp.Alarm((function() {
          return pp.loop.room = pp.rm.gameover;
        }));
        return t.countdown.time = pp.loop.rate * 10;
      },
      draw: function(t) {
        pp.draw.textHalign = 'left';
        pp.draw.textValign = 'bottom';
        pp.draw.color = '#999999';
        pp.draw.font = 'normal normal normal 18px Georgia';
        pp.draw.text(20, 35, 'Lines of code pushed: ' + pp.global.score);
        if (t.countdown.time <= (pp.loop.rate * 5)) {
          pp.draw.color = 'red';
        }
        pp.draw.font = 'normal normal normal 16px Georgia';
        return pp.draw.text(510, 35, Math.ceil(t.countdown.time / pp.loop.rate) + ' seconds left');
      }
    };
    pp.obj.player = {
      mask: pp.spr.player.mask.mask,
      spritel: pp.spr.player.left,
      spriter: pp.spr.player.right,
      i: 0,
      dir: true,
      initialize: function(t) {
        t.x = 640 / 2;
        return t.y = 410;
      },
      tick: function(t) {
        if (pp.key.left.pressed) {
          t.dir = true;
          t.x -= 10;
          if (t.x < 5) {
            t.x = 5;
          }
        }
        if (pp.key.right.pressed) {
          t.dir = false;
          t.x += 10;
          if (t.x > 570) {
            return t.x = 570;
          }
        }
      },
      draw: function(t) {
        if (t.dir) {
          t.spriter.draw(t.x, t.y, t.i);
        } else {
          t.spritel.draw(t.x, t.y, t.i);
        }
        return t.i = (t.i + 1) % 19;
      }
    };
    pp.obj.objects = {
      parent: {
        mask: pp.spr.objects.mask.mask,
        initialize: function(t) {
          t.x = 5 + Math.floor(Math.random() * 600);
          t.y = 40;
          return t.angle = 0;
        },
        tick: function(t) {
          var p;
          t.y += t.vspeed;
          if (t.y > 410) {
            p = pp.obj.player;
            if (!((t.x > (p.x + 64)) || ((t.x + 32) < p.x))) {
              pp.global.score += t.value;
              pp.loop.remove(t);
              if (pp.global.score < 0) {
                pp.global.score = 0;
              }
            }
          }
          if (t.y > 440) {
            if (t.value > 0) {
              pp.global.score -= t.value / 5;
            }
            if (pp.global.score < 0) {
              pp.global.score = 0;
            }
            return pp.loop.remove(t);
          }
        },
        draw: function(t) {
          return t.sprite.draw(t.x, t.y);
        }
      },
      p50: {
        vspeed: 5,
        value: 50,
        sprite: pp.spr.objects.p50
      },
      p20: {
        vspeed: 4,
        value: 20,
        sprite: pp.spr.objects.p20
      },
      p10: {
        vspeed: 3,
        value: 10,
        sprite: pp.spr.objects.p10
      },
      m20: {
        vspeed: 5,
        value: -20,
        sprite: pp.spr.objects.m20
      },
      m10: {
        vspeed: 4,
        value: -10,
        sprite: pp.spr.objects.m10
      },
      m5: {
        vspeed: 3,
        value: -5,
        sprite: pp.spr.objects.m5
      }
    };
    pp.obj.objects.p50.proto = pp.obj.objects.parent;
    pp.obj.objects.p20.proto = pp.obj.objects.parent;
    pp.obj.objects.p10.proto = pp.obj.objects.parent;
    pp.obj.objects.m5.proto = pp.obj.objects.parent;
    pp.obj.objects.m20.proto = pp.obj.objects.parent;
    pp.obj.objects.m10.proto = pp.obj.objects.parent;
    pp.obj.scoreover = {
      draw: function(t) {
        pp.draw.textHalign = 'left';
        pp.draw.textValign = 'bottom';
        pp.draw.color = '#bbbbbb';
        pp.draw.font = 'normal normal normal 35px Georgia';
        return pp.draw.text(80, 250, 'With ' + pp.global.score + ' lines of code pushed');
      }
    };
    pp.obj.retry = {
      mask: pp.spr.retry.mask,
      depth: -1,
      initialize: function(t) {
        t.x = 640 / 2 - 132 / 2;
        return t.y = 300;
      },
      draw: function(t) {
        return pp.spr.retry.draw(t.x, t.y);
      },
      tick: function(t) {
        if (pp.mouse.left.down && pp.collision.point(t, pp.mouse.x, pp.mouse.y, false)) {
          return pp.loop.room = pp.rm.play;
        }
      }
    };
    pp.obj.gameover = {
      depth: -1,
      draw: function(t) {
        return pp.spr.gameover.draw(0, 0);
      }
    };
    pp.rm.welcome = function() {
      pp.loop.register(pp.obj.welcome, 0, 0);
      return pp.loop.register(pp.obj.start, 0, 0);
    };
    pp.rm.play = function() {
      var creator;
      pp.global.score = 0;
      pp.loop.register(pp.obj.background, 0, 0);
      pp.loop.register(pp.obj.score, 0, 0);
      pp.loop.register(pp.obj.player, 0, 0);
      creator = new pp.Alarm(function() {
        var ob;
        ob = pp.obj.objects;
        pp.loop.beget(Math.choose(ob.p10, ob.m5, ob.p20, ob.m10, ob.p50, ob.m20, ob.p10));
        return this.time = pp.loop.rate * 0.5;
      });
      return creator.time = 0;
    };
    pp.rm.gameover = function() {
      if (pp.global.score > best_score) {
        best_score = pp.global.score;
      }
      pp.loop.register(pp.obj.gameover, 0, 0);
      pp.loop.register(pp.obj.scoreover, 0, 0);
      return pp.loop.register(pp.obj.retry, 0, 0);
    };
    pp.loop.active = true;
    return pp.loop.room = pp.rm.welcome;
  };

  pp.load(game);

}).call(this);
