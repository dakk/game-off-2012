// Generated by CoffeeScript 1.4.0
(function() {
  var game, pp;

  pp = PP;

  pp.init("game", 640, 480);

  pp.loop.rate = 30;

  pp.spr.welcome = new pp.Sprite('data/welcome.png', 1, 0, 0);

  pp.spr.start = new pp.Sprite('data/start.png', 1, 0, 0);

  pp.spr.background = new pp.Sprite('data/background.png', 1, 0, 0);

  pp.spr.gameover = new pp.Sprite('data/gameover.png', 1, 0, 0);

  pp.spr.retry = new pp.Sprite('data/retry.png', 1, 0, 0);

  game = function() {
    var _this = this;
    pp.obj.start = {
      mask: pp.spr.start.mask,
      depth: -1,
      initialize: function(t) {
        t.x = 640 / 2 - 114 / 2;
        return t.y = 300;
      },
      draw: function(t) {
        return pp.spr.start.draw(t.x, t.y);
      },
      tick: function(t) {
        if (pp.mouse.left.down && pp.collision.point(t, pp.mouse.x, pp.mouse.y, false)) {
          return pp.loop.room = pp.rm.play;
        }
      }
    };
    pp.obj.welcome = {
      depth: -1,
      draw: function(t) {
        return pp.spr.welcome.draw(0, 0);
      }
    };
    pp.obj.background = {
      depth: -1,
      draw: function(t) {
        return pp.spr.background.draw(0, 0);
      }
    };
    pp.obj.score = {
      initialize: function(t) {
        t.countdown = new pp.Alarm((function() {
          return pp.loop.room = pp.rm.gameover;
        }));
        return t.countdown.time = pp.loop.rate * 99;
      },
      draw: function(t) {
        pp.draw.textHalign = 'left';
        pp.draw.textValign = 'bottom';
        pp.draw.color = '#999999';
        pp.draw.font = 'normal normal normal 20px Georgia';
        pp.draw.text(20, 35, 'Lines of code: ' + pp.global.score);
        if (t.countdown.time <= (pp.loop.rate * 5)) {
          pp.draw.color = 'red';
        }
        pp.draw.font = 'normal normal normal 16px Georgia';
        return pp.draw.text(510, 35, Math.ceil(t.countdown.time / pp.loop.rate) + ' seconds left');
      }
    };
    pp.obj.retry = {
      mask: pp.spr.retry.mask,
      depth: -1,
      initialize: function(t) {
        t.x = 640 / 2 - 132 / 2;
        return t.y = 300;
      },
      draw: function(t) {
        return pp.spr.retry.draw(t.x, t.y);
      },
      tick: function(t) {
        if (pp.mouse.left.down && pp.collision.point(t, pp.mouse.x, pp.mouse.y, false)) {
          return pp.loop.room = pp.rm.play;
        }
      }
    };
    pp.obj.gameover = {
      depth: -1,
      draw: function(t) {
        return pp.spr.gameover.draw(0, 0);
      }
    };
    pp.rm.welcome = function() {
      pp.loop.register(pp.obj.welcome, 0, 0);
      return pp.loop.register(pp.obj.start, 0, 0);
    };
    pp.rm.play = function() {
      pp.global.score = 0;
      pp.loop.register(pp.obj.background, 0, 0);
      return pp.loop.register(pp.obj.score, 0, 0);
    };
    pp.rm.gameover = function() {
      pp.loop.register(pp.obj.gameover, 0, 0);
      return pp.loop.register(pp.obj.retry, 0, 0);
    };
    pp.loop.active = true;
    return pp.loop.room = pp.rm.welcome;
  };

  pp.load(game);

}).call(this);
